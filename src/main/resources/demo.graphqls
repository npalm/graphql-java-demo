schema {
    query: Query,
    mutation: Mutation
    subscription : Subscription
}

type Query {
    # Find all persons
    persons: [Person!]
    # Find a person based on the name
    person(name: String!): Person
    # Find all talks
    talks: [Talk!]
    # Find a talk based on the title
    talk(title: String!): Talk,
    # Find all conferences
    conferences: [Conference!]!,
    # Find a conference based on the name
    conference(name: String!): Conference,
    comments(author: String!): [Comment!]
}

type Mutation {
    # Create a new person
    addConference(conference: InputConference!): Conference
    addPerson(person: InputPerson!): Person
    addTalk(talk: InputTalk): Talk
    addComment(comment: InputComment!): Comment
    addTalkToConference(conferenceId: Long, talkId: Long): Conference
    addSpeakerToTalk(talkId: Long, speakerId: Long): Talk
}


type Subscription {
    comments: CommentUpdate!
}

type CommentUpdate {
    comment : String
    authorName : String
    talkTitle : String
    timeStamp : String
}

# Object to represent a Person
type Person {
    id: ID!,
    # Fullname of the person
    name: String!,
    # URL to the blog
    blog: String,
    # Github account id
    githubAccount: String,
    # Talks given by the person
    talks: [Talk!],
}

# Object to represent a talk
type Talk {
    id: ID!,
    # Title of the talk
    title: String!,
    # Short summary of the talk
    summary: String,
    # Speakers of the talk
    speakers: [Person!],
    # Conferences where the talk is on the agenda
    conferences: [Conference!],
    # discussion comments
    comments: [Comment]
}

# Object to represent a conference
type Conference {
    id: ID!,
    # Name of the conference
    name: String!,
    # City where the conference is held
    city: String,
    # Talks on the conference agenda
    talks: [Talk!]
}

# Object to represent a conference
type Comment {
    id: ID!,
    comment: String,
    author: Person,
    talk: Talk
}


# Object to represent a conference
input InputComment {
    comment: String,
    authorName: String,
    talkId: Long
}

# Object to represent a Person
input InputPerson {
    # Fullname of the person
    name: String!,
    # URL to the blog
    blog: String,
    # Github account id
    githubAccount: String
}


# Object to represent a talk
input InputTalk {
    # Title of the talk
    title: String!,
    # Short summary of the talk
    summary: String
}

input InputConference {
    name: String!,
    city: String!
}