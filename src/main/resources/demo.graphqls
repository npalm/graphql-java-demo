schema {
    query: Query,
    mutation: Mutation
    subscription : Subscription
}

type Query {
    # Find all persons, optional search by name
    persons(filter: InputPerson): [Person!]
    # Find a person based by id
    person(id: Long!): Person
    # Find all talks
    talks(filter: InputTalk): [Talk!]
    # Find a talk by id
    talk(id: Long!): Talk
    # Find all conferences
    conferences(filter: InputConference): [Conference!]
    # Find a conference based on the name
    conference(id: Long!): Conference
    # Find a comment by id
    comment(id: Long!): Comment
    # Find comments
    comments(page: InputPage): CommentPageableResponse
}

type Mutation {
    # Add a new conference
    addConference(conference: InputConference!): Conference
    # Add a new Person
    addPerson(person: InputPerson!): Person
    # Add a new Talk
    addTalk(talk: InputTalk): Talk
    # Add a new comment
    addComment(comment: InputComment!): Comment
    # Add a talk to a conference
    addTalkToConference(conferenceId: Long, talkId: Long): Conference
    # Add a speaker to a talk
    addSpeakerToTalk(talkId: Long, speakerId: Long): Talk
}


type Subscription {
    # Subscribe to all new comments
    comments: Comment!
}

# Object to represent a Person
type Person {
    # The technical id
    id: ID!
    # Fullname of the person
    name: String!
    # URL to the blog
    blog: String
    # Github account id
    githubAccount: String
    # Talks given by the person
    talks: [Talk!]
}

# Object to represent a talk
type Talk {
    # The technical id
    id: ID!
    # Title of the talk
    title: String!
    # Short summary of the talk
    summary: String
    # Speakers of the talk
    speakers: [Person!]
    # Conferences where the talk is on the agenda
    conferences: [Conference!]
}

# Object to represent a conference
type Conference {
    # The technical id
    id: ID!
    # Name of the conference
    name: String!
    # City where the conference is held
    city: String,
    # Talks on the conference agenda
    talks: [Talk!]
}

# Object to represent a comment
type Comment {
    # The technical id
    id: ID!
    # The comment text
    comment: String!
    # Creation time of the comment
    createdOn : String
    # The author of the comment
    author: String!
    # The talk for which the comment is made
    talk: Talk!
}


# Input type for a new Comment
input InputComment {
    # The comment text
    comment: String!
    # The id of the author
    author: String!
    # The id of the talk
    talkId: Long!
}

# Input type for a new Person
input InputPerson {
    # Fullname of the person
    name: String
    # URL to the blog
    blog: String
    # Github account id
    githubAccount: String
}


# Input type for a new Talk
input InputTalk {
    # Title of the talk
    title: String
    # Short summary of the talk
    summary: String
}

# Input type for a new Conference
input InputConference {
    # Name of the conference
    name: String
    # City where the conference is held
    city: String
}

input InputPage {
    # The requested page
    page: Long!
    # The requested size of the page
    size: Long!
}

type PageInfo {
    # Total number of elements
    totalElements: Long!
    # Total number of pages
    totalPages: Long!
    # Number of elements
    numberOfElements: Long!
    # Page number
    pageNumber: Long!
    # Size of the page
    pageSize: Long!
}

type CommentPageableResponse {
    # Information of the page
    pageInfo: PageInfo!
    # The comments
    content: [Comment]
}

